name: pytest

on:
  - push
  - pull_request

jobs:
  test:
    # Run tests on every push, and after landing.
    # We run tests after landing mainly to update the cache, since a recent
    # cache on main will speed up the first build on new branches.
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10]

    env:
      VIRTUAL_ENV: /home/runner/virtualenv

    steps:
      - name: Check out test branch.
        # Fetching and checking out the branch directly is a few seconds faster than using
        # actions/checkout@v2, since the latter is way fancier than we actually need.
        #   gc.auto 0
        #     GC is slow, so disable it.
        #   fetch --no-tags
        #     There might be a large number of tags. Ignore them.
        run: |
          # Check out test branch.
          set -v
          git init ${{ github.workspace }}
          cd ${{ github.workspace }}
          git remote add origin https://github.com/${{ github.repository }}
          git config --local gc.auto 0
          git fetch --no-tags --depth=1 origin main:main +${{ github.sha }}:test
          git checkout main

          # Set modified time of each file to the latest commit time so pytest caching works.
          # Credit: https://stackoverflow.com/questions/2458042/restore-a-files-modification-time-in-git
          git log --pretty=%at --name-status --reverse |
            perl -ane '($x,$f)=@F;next if !$x;$t=$x,next if !defined($f)||$s{$f};$s{$f}=utime($t,$t,$f),next if $x=~/[AM]/;'

          # Finally, checkout the commit we want to test so that any modified files have their mtime updated.
          git checkout test

      - name: Get current date
        run: |
          echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Cache virtualenv
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            /home/runner/virtualenv
            /home/runner/pytest_cache
          # runner.os
          #   Caches are not compatible across OSes.
          # virtualenv
          #   Identify this particular cache in case we add more.
          # matrix.python-version
          #   The virtualenv contains a copy of Python, so we want separate caches for
          #   each Python version.
          # hashFiles('Pipfile.lock')
          #   If the dependencies or dependency versions change, we should create a whole
          #   new virtualenv to ensure it is clean.
          # hashFiles('.github/workflows/test.yml')
          #   If this configuration file changes, the cache may no longer be valid.
          # github.ref == 'refs/heads/main' && github.sha || env.DATE
          #   On main, create a new cache for every commit. On feature branches, create a new
          #   cache only for the first commit on a given calendar day. This section is truncated
          #   from restore-keys to allow feature branches (and main) to restore a recent cache
          #   created on main. Because a new cache is saved for every commit on main, new feature
          #   branches will always have a recent cache to work with. Subsequent commits on the
          #   feature branch will use the cache created on the first feature branch commit, which
          #   saves a few seconds since subsequent commits on feature branches don't need to upload
          #   a new cache version.
          key: "\
            ${{ runner.os }}-\
            virtualenv-${{ matrix.python-version }}-\
            ${{ hashFiles('Pipfile.lock') }}-\
            ${{ hashFiles('.github/workflows/test.yml') }}-\
            ${{ github.ref == 'refs/heads/main' && github.sha || env.DATE }}"  # Always create a new cache on main.
          restore-keys: "\
            ${{ runner.os }}-\
            virtualenv-${{ matrix.python-version }}-\
            ${{ hashFiles('Pipfile.lock') }}-\
            ${{ hashFiles('.github/workflows/test.yml') }}-"

      - name: Install Python ${{ matrix.python-version }}
        # Use actions/setup-python@v2 to install Python. We install and invoke the action manually
        # (rather than with "use:") to avoid downloading it at all if we won't need it.
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # Install Python (skip if cache was restored).
          if [ ! -d "$VIRTUAL_ENV" ]; then  # Skip if cache restored, even an older cache.
            set -v
            git -c advice.detachedHead=0 clone https://github.com/actions/setup-python -b v2 --depth 1 /tmp/setup-python
            env INPUT_PYTHON-VERSION=${{ matrix.python-version }} node /tmp/setup-python/dist/setup/index.js
          fi

      - name: Set up virtualenv
        # Only set up the virtualenv if one wasn't loaded from the cache. Since hashFiles('Pipfile.lock')
        # is part of the cache key, any change to dependencies will force a cache miss and therefore cause
        # this section to run.
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # Set up virtualenv (skip if cache was restored).
          if [ ! -d "$VIRTUAL_ENV" ]; then  # Skip if cache restored, even an order cache.
            which python
            python --version
            python -m venv $VIRTUAL_ENV
            source $VIRTUAL_ENV/bin/activate
            which python
            python --version
            python -m pip install pipenv
            python -m pipenv install --dev
          fi

      - name: Test with pytest
        run: |
          # Test with pytest.
          source $VIRTUAL_ENV/bin/activate
          which python
          python --version
          python -m pytest --pylint --flake8 -o cache_dir=/home/runner/pytest_cache
