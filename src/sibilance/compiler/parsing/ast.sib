import .re


@abstract
class Node:
    begin: re.Cursor
    end: re.Cursor


@immutable
class VariableReference(Node):
    name: String


@immutable
class VariableDefinition(Node):
    name: String
    annotations: FrozenList[Expression]
    initialization: Expression|None


@immutable
class Expression(Node):
    pass


@immutable
class Statement(Node):
    pass


@immutable
class ArgumentsDefinition(Node):
    positional_arguments: FrozenList[VariableDefinition]
    keyword_arguments: FrozenMap[String, VariableDefinition]


@immutable
class Function(Node):
    bindings: ArgumentsDefinition
    arguments: ArgumentsDefinition
    statements: FrozenList[Statement]


@immutable
class Class(Node):
    bindings: ArgumentsDefinition
    bases: FrozenList[Expression]
    statements: FrozenList[Statement]


@immutable
class Import(Node):
    name: String
    path: FrozenList[String]


@immutable
class Module(Node):
    imports: FrozenList[Import]
    statements: FrozenList[Statement]
